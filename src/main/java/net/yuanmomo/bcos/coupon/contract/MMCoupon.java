package net.yuanmomo.bcos.coupon.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int8;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class MMCoupon extends Contract {
    public static final String[] BINARY_ARRAY = {"","610e6c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f636f646500000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610f3f578082015181840152602081019050610f24565b50505050905090810190601f168015610f6c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610f8c57600080fd5b505af1158015610fa0573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba748760ff166040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f747970650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561104f57600080fd5b505af1158015611063573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f76616c756500000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561110f57600080fd5b505af1158015611123573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba746000600181111561115057fe5b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f757365640000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156111db57600080fd5b505af11580156111ef573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac368b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156112b0578082015181840152602081019050611295565b50505050905090810190601f1680156112dd5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156112fd57600080fd5b505af1158015611311573d6000803e3d6000fd5b505050506040513d602081101561132757600080fd5b810190808051906020019092919050505014611363577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe611366565b60005b92507fe5e1593b20ba2500a585beb4894c6a2018a38f4ef0f41fe5d566f85f87b60094838a8a604051808460000b60000b81526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156113dc5780820151818401526020810190506113c1565b50505050905090810190601f1680156114095780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611442578082015181840152602081019050611427565b50505050905090810190601f16801561146f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a18294505b50505050949350505050565b6000606060008060008060606000806114a6612715565b94508473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b505050506040513d602081101561153657600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663e44594b96000600181111561157257fe5b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f757365640000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156115fd57600080fd5b505af1158015611611573d6000803e3d6000fd5b50505050899250600083511115611748578373ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f636f646500000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156116e25780820151818401526020810190506116c7565b50505050905090810190601f16801561170f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561172f57600080fd5b505af1158015611743573d6000803e3d6000fd5b505050505b8473ffffffffffffffffffffffffffffffffffffffff1663e8434e398c866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156118035780820151818401526020810190506117e8565b50505050905090810190601f1680156118305780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561185057600080fd5b505af1158015611864573d6000803e3d6000fd5b505050506040513d602081101561187a57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118f157600080fd5b505af1158015611905573d6000803e3d6000fd5b505050506040513d602081101561191b57600080fd5b810190808051906020019092919050505060001415611989577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080600181111561196357fe5b829250602060405190810160405280600081525091908191509850985098509850611d2b565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156119f957600080fd5b505af1158015611a0d573d6000803e3d6000fd5b505050506040513d6020811015611a2357600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f636f646500000000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015611ad857600080fd5b505af1158015611aec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b1657600080fd5b810190808051640100000000811115611b2e57600080fd5b82810190506020810184811115611b4457600080fd5b8151856001820283011164010000000082111715611b6157600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260058152602001807f76616c7565000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611c0957600080fd5b505af1158015611c1d573d6000803e3d6000fd5b505050506040513d6020811015611c3357600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260048152602001807f7479706500000000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b505050506040513d6020811015611d0e57600080fd5b810190808051906020019092919050505083935098509850985098505b505050505092959194509250565b6000806000611d46612715565b91508173ffffffffffffffffffffffffffffffffffffffff166328bb2117858473ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611dc957600080fd5b505af1158015611ddd573d6000803e3d6000fd5b505050506040513d6020811015611df357600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff","168152602001828103825284818151815260200191508051906020019080838360005b83811015611ea1578082015181840152602081019050611e86565b50505050905090810190601f168015611ece5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611eee57600080fd5b505af1158015611f02573d6000803e3d6000fd5b505050506040513d6020811015611f1857600080fd5b810190808051906020019092919050505090507fb6e093787f888c0c77ff47b5b798a5e48a2a892a12a43d9ee321d33fd582afde816040518082815260200191505060405180910390a18092505050919050565b6000806000806000806000611f81898961148f565b509650509550600093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8660000b1415612101577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93507febb26c335a6d73f88ef0fa7146bc3166b1bb5a96fc9393a5e00a6a1d93491bb2848a8a6000604051808560000b60000b81526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561205557808201518184015260208101905061203a565b50505050905090810190601f1680156120825780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156120bb5780820151818401526020810190506120a0565b50505050905090810190601f1680156120e85780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1839650612709565b612109612715565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561216f57600080fd5b505af1158015612183573d6000803e3d6000fd5b505050506040513d602081101561219957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260048152602001807f636f646500000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561226c578082015181840152602081019050612251565b50505050905090810190601f1680156122995780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156122b957600080fd5b505af11580156122cd573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561233557600080fd5b505af1158015612349573d6000803e3d6000fd5b505050506040513d602081101561235f57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16632ef8ba7460018081111561239a57fe5b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f757365640000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561242557600080fd5b505af1158015612439573d6000803e3d6000fd5b5050505060018373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18b84866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561252d578082015181840152602081019050612512565b50505050905090810190601f16801561255a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561257b57600080fd5b505af115801561258f573d6000803e3d6000fd5b505050506040513d60208110156125a557600080fd5b8101908080519060200190929190505050146125e1577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6125e4565b60005b93507febb26c335a6d73f88ef0fa7146bc3166b1bb5a96fc9393a5e00a6a1d93491bb2848a8a88604051808560000b60000b81526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b83811015612661578082015181840152602081019050612646565b50505050905090810190601f16801561268e5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156126c75780820151818401526020810190506126ac565b50505050905090810190601f1680156126f45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a18396505b50505050505092915050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f745f636f75706f6e000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156127bf57600080fd5b505af11580156127d3573d6000803e3d6000fd5b505050506040513d60208110156127e957600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a7230582075574dc367249e8302d3cf965efa3f8935c13e6daedaa8d6b336017a8478bc950029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"send\",\"type\":\"string\"},{\"name\":\"receive\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"give\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"codeType\",\"type\":\"uint8\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"}],\"name\":\"deleteDate\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"use\",\"outputs\":[{\"name\":\"\",\"type\":\"int8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"int8\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"}],\"name\":\"GetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"int8\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"int8\"},{\"indexed\":false,\"name\":\"send\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"receive\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"string\"}],\"name\":\"GiveEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_GIVE = "give";

    public static final String FUNC_GET = "get";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_DELETEDATE = "deleteDate";

    public static final String FUNC_USE = "use";

    public static final Event GETEVENT_EVENT = new Event("GetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event USEEVENT_EVENT = new Event("UseEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GIVEEVENT_EVENT = new Event("GiveEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEEVENT_EVENT = new Event("RemoveEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    @Deprecated
    protected MMCoupon(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MMCoupon(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MMCoupon(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MMCoupon(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> give(String send, String receive, String code) {
        final Function function = new Function(
                FUNC_GIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(send), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(receive), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void give(String send, String receive, String code, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(send), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(receive), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String giveSeq(String send, String receive, String code) {
        final Function function = new Function(
                FUNC_GIVE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(send), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(receive), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getGiveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GIVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getGiveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GIVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> get(String account, String code, BigInteger value, BigInteger codeType) {
        final Function function = new Function(
                FUNC_GET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(codeType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void get(String account, String code, BigInteger value, BigInteger codeType, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(codeType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSeq(String account, String code, BigInteger value, BigInteger codeType) {
        final Function function = new Function(
                FUNC_GET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(value), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint8(codeType)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, BigInteger> getGetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getGetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>> select(String account, String code) {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple4<BigInteger, String, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteDate(String account) {
        final Function function = new Function(
                FUNC_DELETEDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteDate(String account, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETEDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String deleteDateSeq(String account) {
        final Function function = new Function(
                FUNC_DELETEDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getDeleteDateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getDeleteDateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> use(String account, String code) {
        final Function function = new Function(
                FUNC_USE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void use(String account, String code, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_USE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String useSeq(String account, String code) {
        final Function function = new Function(
                FUNC_USE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(account), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(code)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getUseInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getUseOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_USE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<GetEventEventResponse> getGetEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GETEVENT_EVENT, transactionReceipt);
        ArrayList<GetEventEventResponse> responses = new ArrayList<GetEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetEventEventResponse typedResponse = new GetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerGetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerGetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UseEventEventResponse> getUseEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USEEVENT_EVENT, transactionReceipt);
        ArrayList<UseEventEventResponse> responses = new ArrayList<UseEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UseEventEventResponse typedResponse = new UseEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerUseEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(USEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerUseEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(USEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<GiveEventEventResponse> getGiveEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GIVEEVENT_EVENT, transactionReceipt);
        ArrayList<GiveEventEventResponse> responses = new ArrayList<GiveEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GiveEventEventResponse typedResponse = new GiveEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.send = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receive = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerGiveEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GIVEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerGiveEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(GIVEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<RemoveEventEventResponse> getRemoveEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveEventEventResponse> responses = new ArrayList<RemoveEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveEventEventResponse typedResponse = new RemoveEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRemoveEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerRemoveEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REMOVEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static MMCoupon load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MMCoupon(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MMCoupon load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MMCoupon(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MMCoupon load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MMCoupon(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MMCoupon load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MMCoupon(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MMCoupon> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MMCoupon.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<MMCoupon> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MMCoupon.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MMCoupon> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MMCoupon.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MMCoupon> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MMCoupon.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class GetEventEventResponse {
        public Log log;

        public BigInteger result;

        public String account;

        public String code;
    }

    public static class UseEventEventResponse {
        public Log log;

        public BigInteger result;

        public String account;

        public String code;

        public BigInteger value;
    }

    public static class GiveEventEventResponse {
        public Log log;

        public BigInteger result;

        public String send;

        public String receive;

        public String code;
    }

    public static class RemoveEventEventResponse {
        public Log log;

        public BigInteger count;
    }
}
